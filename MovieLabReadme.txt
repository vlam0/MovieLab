  DIPs.c
	In the DIPs.c file, not much is needed to be done besides including the percentage changes to the filters. In the BlackNWhite function, instead of average, I replaced it with gray. I used the percent from the parameter and converted it into a floating percent between 0 and 1. Then I applied the calculations for the offset values passed on the percentage of the filter the user wants. For the Hue function, the only thing that was changed was the calculation for degree where I converted the percentage and multiplied by 360.

ImageList.c
	In the CreateImageEntry function, first was to declare a new variable as IENTRY and make allocation then to set all those pointer values to NULL such as entry->List =NULL, entry->Next = NULL, etc. Then return entry. 
In the DeleteImageEntry, first is to assert the entry parameter to check for errors. Then make two if statements for if the entry has a RGBImage and/or YUVImage, the to apply the Delete function if they have those images. Next is to free the entry overall. 
The CreateImageList works like the CreateImageEntry function accept it’s creating an ILIST and the pointer needs to make length = 0, and First and Last to NULL. 
For the DeleteImageList function, first I declared IENTRY of a current entry and a next. I set the current to the first of the list, then made a loop to point throughout the entire list and delete each entry of the current with the Delete entry function. Then I freed the list. 
AppendRGB and AppendYUV are both similar accept the type of image parameter is different. I first create an entry, then have the entry->List point to the main list. I have an if statement to check if the list is empty or not. If the list is empty, I set all the Next and Prev pointer to NULL, based on the type of image the user wants to append, I make the entry pointer point to that image. Then I set the First and Last pointer to entry and make length increase by 1. If the list exists, I set the entry Next pointer to NULL, have Prev of entry pointer point to the last in the list, entry image point to the image, then set the list last to the new entry. 
The ReverseImageList function, I first make a temp entry pointer and swap the First and Last pointers. Then Make a while statement for the current entry to swap the next pointers and previous pointers. 
I created a new Function for CopyYUVImage which is almost a replica to the CopyImage function. It was used to ensure that The YUV colors were copied into the pointers when changing the movie in the main function. 

IterativeFilter.c
	For the iterative function, I created a movie, copied image and set into RGBimage variable. Made an if statement if user inputs start value greater than the end value. Made a loop to apply the change in percentage until user reached end percentage or less then append the RGBimage to the new movie. Then I deleted the image of RGB to free up that created image variable and returned the movie.

Makefile
	For the makefile, I declared all FLAGS as all the warnings such as -ansi -std=c99 -Wall -g, made DESIGN the compiled runnable file, all set to dependencies of all MovieLab related files. I made all the .o files based on their dependencies. For the MovieLab, I set all the .o files as it’s dependencies. Last was to set a clean function to clear all the .o, .yuv. and compiled file. 

Movie.c
	The CreateMovie function, first was to declare a MOVIE pointer and make allocation then create list with that pointer. The DeleteMovie function, I called upon the DeleteImageList function then freed the movie. The YUV2RGBMovie function, First was to create IENTRY for current entry and point it to the first frame. Then make three loops: number of frames, width of image, height of image. Inside those loops, I altered the YUV colors to RGB. Outside of the width and height loops, I created an image for each frame, then deleted the YUVImage as soon as the conversions are done then moves on to the next frame. The RGB2YUVMovie function works the same as YUV2RGBMovie accept conversions are different.

MovieLab.c
	In the main function, the first loop checks through the command line argument. I had it check if the user inputs the values correctly and sets the values to variables. I set a menu display if the user fails to input and of the correct values. In the if statements where user chooses to load image to make into a movie, I displayed if the user fails to put parameters for the items they missed. If they managed to input everything correctly, then the movie gets made with their selected filter they choose. I altered the RGB2YUVMovie the saved the movie as the users selected name for the output movie then deleted the variable for the image input and movie output to free up all allocations. If the user chooses to upload a movie to make another movie, I create a movie, and have it loop through for the number of frames the user chooses and copied it from the original movie. If user wants to reverse the movie, then the reverse function gets applied. After, I save the movie as user output movie name that chose then delete the movie output and input variable to free up all the allocations used.

